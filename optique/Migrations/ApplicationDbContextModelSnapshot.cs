// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using optique.Data;

#nullable disable

namespace optique.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RefDevise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefDevises");
                });

            modelBuilder.Entity("optique.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("optique.Models.Arrivage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateArrivage")
                        .HasColumnType("datetime2");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MontantFacture")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumBL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumFacture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.Property<int?>("StatutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("StatutId");

                    b.ToTable("Arrivages");
                });

            modelBuilder.Entity("optique.Models.ArrivageDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivageId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreePar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateArrivage")
                        .HasColumnType("datetime2");

                    b.Property<int>("FichierId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NumSerie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrixAchatNetDevise")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixAchatNetMAD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixDachatDevise")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixDachatMAD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantiteRecuParArticle")
                        .HasColumnType("int");

                    b.Property<decimal>("TauxRemise")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivageId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArrivageDetails");
                });

            modelBuilder.Entity("optique.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CodeBarre")
                        .HasColumnType("int");

                    b.Property<string>("Couleur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MarqueId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixDeVenteClientFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixDeVenteInter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixDeVenteRevendeur")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("MarqueId");

                    b.HasIndex("TypeId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("optique.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NomClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeClientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("optique.Models.DetailsPaiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArrivageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NCheque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NLCN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDePaiementId")
                        .HasColumnType("int");

                    b.Property<int?>("VenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivageId");

                    b.HasIndex("TypeDePaiementId");

                    b.HasIndex("VenteId");

                    b.ToTable("DetailsPaiements");
                });

            modelBuilder.Entity("optique.Models.Distribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDistribution")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.Property<int>("StatutDistributionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("StatutDistributionId");

                    b.ToTable("Distributions");
                });

            modelBuilder.Entity("optique.Models.DistributionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivageDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("DistributionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NumFacture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrixDeVente")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivageDetailsId");

                    b.HasIndex("DistributionId");

                    b.ToTable("DistributionDetails");
                });

            modelBuilder.Entity("optique.Models.Fournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviseId")
                        .HasColumnType("int");

                    b.Property<string>("ICE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NomFournisseur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviseId");

                    b.ToTable("Fournisseurs");
                });

            modelBuilder.Entity("optique.Models.MouvementArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArrivageDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("CreePar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDeCreation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistributionDetailsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int?>("RetourFournisseurId")
                        .HasColumnType("int");

                    b.Property<int?>("VenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivageDetailsId");

                    b.HasIndex("DistributionDetailsId");

                    b.HasIndex("RetourFournisseurId");

                    b.HasIndex("VenteId");

                    b.ToTable("MouvementArticles");
                });

            modelBuilder.Entity("optique.Models.RefMarque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AvecNumSerie")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefMarques");
                });

            modelBuilder.Entity("optique.Models.RefStatutDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefStatutDistribution");
                });

            modelBuilder.Entity("optique.Models.RefType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefTypes");
                });

            modelBuilder.Entity("optique.Models.RefTypeClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefTypeClient");
                });

            modelBuilder.Entity("optique.Models.RefTypeDePaiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefTypeDePaiements");
                });

            modelBuilder.Entity("optique.Models.RefTypeRetour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefTypeRetour");
                });

            modelBuilder.Entity("optique.Models.RetourFournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivageDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("ArrivageDetailsId1")
                        .HasColumnType("int");

                    b.Property<string>("CreePar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRetour")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MotifRetour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantiteRetournee")
                        .HasColumnType("int");

                    b.Property<int>("TypeRetourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivageDetailsId");

                    b.HasIndex("ArrivageDetailsId1")
                        .IsUnique()
                        .HasFilter("[ArrivageDetailsId1] IS NOT NULL");

                    b.HasIndex("TypeRetourId");

                    b.ToTable("RetourFournisseurs");
                });

            modelBuilder.Entity("optique.Models.Societe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NomSociete")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Societes");
                });

            modelBuilder.Entity("optique.Models.Vente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientIdAcheteur")
                        .HasColumnType("int");

                    b.Property<string>("CreePar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDeVente")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NDeBon")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixDeVente")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantiteVendu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientIdAcheteur");

                    b.ToTable("Ventes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("optique.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("optique.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("optique.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("optique.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("optique.Models.Arrivage", b =>
                {
                    b.HasOne("optique.Models.Fournisseur", "Fournisseur")
                        .WithMany("Arrivages")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("optique.Models.Societe", "Societe")
                        .WithMany("Arrivages")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("optique.Models.RefStatutDistribution", "RefStatutDistribution")
                        .WithMany()
                        .HasForeignKey("StatutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Fournisseur");

                    b.Navigation("RefStatutDistribution");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("optique.Models.ArrivageDetails", b =>
                {
                    b.HasOne("optique.Models.Arrivage", "Arrivage")
                        .WithMany("ArrivageDetails")
                        .HasForeignKey("ArrivageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("optique.Models.Article", "Article")
                        .WithMany("ArrivageDetails")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Arrivage");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("optique.Models.Article", b =>
                {
                    b.HasOne("optique.Models.Fournisseur", "Fournisseur")
                        .WithMany("Articles")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("optique.Models.RefMarque", "Marque")
                        .WithMany("Articles")
                        .HasForeignKey("MarqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("optique.Models.RefType", "Type")
                        .WithMany("Articles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");

                    b.Navigation("Marque");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("optique.Models.Client", b =>
                {
                    b.HasOne("optique.Models.RefTypeClient", "TypeClient")
                        .WithMany("Clients")
                        .HasForeignKey("TypeClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeClient");
                });

            modelBuilder.Entity("optique.Models.DetailsPaiement", b =>
                {
                    b.HasOne("optique.Models.Arrivage", "Arrivage")
                        .WithMany("DetailsPaiements")
                        .HasForeignKey("ArrivageId");

                    b.HasOne("optique.Models.RefTypeDePaiement", "TypeDePaiement")
                        .WithMany("DetailsPaiements")
                        .HasForeignKey("TypeDePaiementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("optique.Models.Vente", "Vente")
                        .WithMany("DetailsPaiements")
                        .HasForeignKey("VenteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Arrivage");

                    b.Navigation("TypeDePaiement");

                    b.Navigation("Vente");
                });

            modelBuilder.Entity("optique.Models.Distribution", b =>
                {
                    b.HasOne("optique.Models.Client", "Client")
                        .WithMany("Distributions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("optique.Models.Societe", "Societe")
                        .WithMany("Distributions")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("optique.Models.RefStatutDistribution", "StatutDistribution")
                        .WithMany("Distributions")
                        .HasForeignKey("StatutDistributionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Societe");

                    b.Navigation("StatutDistribution");
                });

            modelBuilder.Entity("optique.Models.DistributionDetails", b =>
                {
                    b.HasOne("optique.Models.ArrivageDetails", "ArrivageDetails")
                        .WithMany("DistributionDetails")
                        .HasForeignKey("ArrivageDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("optique.Models.Distribution", "Distribution")
                        .WithMany("DistributionDetails")
                        .HasForeignKey("DistributionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArrivageDetails");

                    b.Navigation("Distribution");
                });

            modelBuilder.Entity("optique.Models.Fournisseur", b =>
                {
                    b.HasOne("RefDevise", "Devise")
                        .WithMany("Fournisseurs")
                        .HasForeignKey("DeviseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");
                });

            modelBuilder.Entity("optique.Models.MouvementArticle", b =>
                {
                    b.HasOne("optique.Models.ArrivageDetails", "ArrivageDetails")
                        .WithMany("MouvementArticles")
                        .HasForeignKey("ArrivageDetailsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("optique.Models.DistributionDetails", "DistributionDetails")
                        .WithMany("MouvementArticles")
                        .HasForeignKey("DistributionDetailsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("optique.Models.RetourFournisseur", "RetourFournisseur")
                        .WithMany("MouvementArticles")
                        .HasForeignKey("RetourFournisseurId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("optique.Models.Vente", "Vente")
                        .WithMany("MouvementArticles")
                        .HasForeignKey("VenteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ArrivageDetails");

                    b.Navigation("DistributionDetails");

                    b.Navigation("RetourFournisseur");

                    b.Navigation("Vente");
                });

            modelBuilder.Entity("optique.Models.RetourFournisseur", b =>
                {
                    b.HasOne("optique.Models.ArrivageDetails", "ArrivageDetails")
                        .WithMany("RetourFournisseurs")
                        .HasForeignKey("ArrivageDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("optique.Models.ArrivageDetails", null)
                        .WithOne("RetourFournisseur")
                        .HasForeignKey("optique.Models.RetourFournisseur", "ArrivageDetailsId1");

                    b.HasOne("optique.Models.RefTypeRetour", "TypeRetour")
                        .WithMany("RetourFournisseurs")
                        .HasForeignKey("TypeRetourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivageDetails");

                    b.Navigation("TypeRetour");
                });

            modelBuilder.Entity("optique.Models.Vente", b =>
                {
                    b.HasOne("optique.Models.Article", "Article")
                        .WithMany("Ventes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("optique.Models.Client", "Client")
                        .WithMany("Ventes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("optique.Models.Client", "ClientAcheteur")
                        .WithMany()
                        .HasForeignKey("ClientIdAcheteur");

                    b.Navigation("Article");

                    b.Navigation("Client");

                    b.Navigation("ClientAcheteur");
                });

            modelBuilder.Entity("RefDevise", b =>
                {
                    b.Navigation("Fournisseurs");
                });

            modelBuilder.Entity("optique.Models.Arrivage", b =>
                {
                    b.Navigation("ArrivageDetails");

                    b.Navigation("DetailsPaiements");
                });

            modelBuilder.Entity("optique.Models.ArrivageDetails", b =>
                {
                    b.Navigation("DistributionDetails");

                    b.Navigation("MouvementArticles");

                    b.Navigation("RetourFournisseur");

                    b.Navigation("RetourFournisseurs");
                });

            modelBuilder.Entity("optique.Models.Article", b =>
                {
                    b.Navigation("ArrivageDetails");

                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("optique.Models.Client", b =>
                {
                    b.Navigation("Distributions");

                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("optique.Models.Distribution", b =>
                {
                    b.Navigation("DistributionDetails");
                });

            modelBuilder.Entity("optique.Models.DistributionDetails", b =>
                {
                    b.Navigation("MouvementArticles");
                });

            modelBuilder.Entity("optique.Models.Fournisseur", b =>
                {
                    b.Navigation("Arrivages");

                    b.Navigation("Articles");
                });

            modelBuilder.Entity("optique.Models.RefMarque", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("optique.Models.RefStatutDistribution", b =>
                {
                    b.Navigation("Distributions");
                });

            modelBuilder.Entity("optique.Models.RefType", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("optique.Models.RefTypeClient", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("optique.Models.RefTypeDePaiement", b =>
                {
                    b.Navigation("DetailsPaiements");
                });

            modelBuilder.Entity("optique.Models.RefTypeRetour", b =>
                {
                    b.Navigation("RetourFournisseurs");
                });

            modelBuilder.Entity("optique.Models.RetourFournisseur", b =>
                {
                    b.Navigation("MouvementArticles");
                });

            modelBuilder.Entity("optique.Models.Societe", b =>
                {
                    b.Navigation("Arrivages");

                    b.Navigation("Distributions");
                });

            modelBuilder.Entity("optique.Models.Vente", b =>
                {
                    b.Navigation("DetailsPaiements");

                    b.Navigation("MouvementArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
